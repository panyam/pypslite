# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pypslite import pslite_pb2 as pypslite_dot_pslite__pb2


class PSLiteServiceStub(object):
    """*
    The streaming servicefor listening to events from the server in a
    streaming fashion.
    The typical use case is:
    client creates a subscription object.  This Subscription object
    can be used to add or remove items to watch for.

    When the client is ready they can start listening on the subscription
    when the server would send a stream of events/updates.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OpenTopic = channel.unary_unary(
                '/pslite_protos.PSLiteService/OpenTopic',
                request_serializer=pypslite_dot_pslite__pb2.OpenTopicRequest.SerializeToString,
                response_deserializer=pypslite_dot_pslite__pb2.EmptyMessage.FromString,
                )
        self.Publish = channel.unary_unary(
                '/pslite_protos.PSLiteService/Publish',
                request_serializer=pypslite_dot_pslite__pb2.PublishRequest.SerializeToString,
                response_deserializer=pypslite_dot_pslite__pb2.EmptyMessage.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/pslite_protos.PSLiteService/Subscribe',
                request_serializer=pypslite_dot_pslite__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=pypslite_dot_pslite__pb2.Message.FromString,
                )


class PSLiteServiceServicer(object):
    """*
    The streaming servicefor listening to events from the server in a
    streaming fashion.
    The typical use case is:
    client creates a subscription object.  This Subscription object
    can be used to add or remove items to watch for.

    When the client is ready they can start listening on the subscription
    when the server would send a stream of events/updates.
    """

    def OpenTopic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PSLiteServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OpenTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenTopic,
                    request_deserializer=pypslite_dot_pslite__pb2.OpenTopicRequest.FromString,
                    response_serializer=pypslite_dot_pslite__pb2.EmptyMessage.SerializeToString,
            ),
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=pypslite_dot_pslite__pb2.PublishRequest.FromString,
                    response_serializer=pypslite_dot_pslite__pb2.EmptyMessage.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=pypslite_dot_pslite__pb2.SubscribeRequest.FromString,
                    response_serializer=pypslite_dot_pslite__pb2.Message.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pslite_protos.PSLiteService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PSLiteService(object):
    """*
    The streaming servicefor listening to events from the server in a
    streaming fashion.
    The typical use case is:
    client creates a subscription object.  This Subscription object
    can be used to add or remove items to watch for.

    When the client is ready they can start listening on the subscription
    when the server would send a stream of events/updates.
    """

    @staticmethod
    def OpenTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pslite_protos.PSLiteService/OpenTopic',
            pypslite_dot_pslite__pb2.OpenTopicRequest.SerializeToString,
            pypslite_dot_pslite__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pslite_protos.PSLiteService/Publish',
            pypslite_dot_pslite__pb2.PublishRequest.SerializeToString,
            pypslite_dot_pslite__pb2.EmptyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pslite_protos.PSLiteService/Subscribe',
            pypslite_dot_pslite__pb2.SubscribeRequest.SerializeToString,
            pypslite_dot_pslite__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
